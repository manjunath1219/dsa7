+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 1**

Given two strings s and t, *determine if they are isomorphic*.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

**Example 1:**

**Input:** s = "egg", t = "add"

**Output:** true

</aside>
----


+*In[ ]:*+
[source, ipython3]
----
If the lengths of s and t are not equal, return False because isomorphic strings must have the same length.
Initialize two dictionaries s_map and t_map to map characters from s to t and from t to s, respectively.
Iterate over each character s_char and t_char at the same index in s and t.
If s_char is not in s_map and t_char is not in t_map, add mappings s_char: t_char to s_map and t_char: s_char to t_map.
If s_char is in s_map and its mapping value is not equal to t_char, or if t_char is in t_map and its mapping value is not equal
to s_char, return False because the characters do not preserve the order or have multiple mappings.
If all characters are processed successfully without returning False, return True because the strings are isomorphic.
----


+*In[1]:*+
[source, ipython3]
----
def isIsomorphic(s, t):
    if len(s) != len(t):
        return False

    s_map, t_map = {}, {}

    for s_char, t_char in zip(s, t):
        if s_char not in s_map and t_char not in t_map:
            s_map[s_char] = t_char
            t_map[t_char] = s_char
        elif s_map.get(s_char) != t_char or t_map.get(t_char) != s_char:
            return False

    return True
s = "egg"
t = "add"
print(isIsomorphic(s, t))
----


+*Out[1]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 2**

Given a string num which represents an integer, return true *if* num *is a **strobogrammatic number***.

A **strobogrammatic number** is a number that looks the same when rotated 180 degrees (looked at upside down).

**Example 1:**

**Input:** num = "69"

**Output:**

true

</aside>
----


+*In[ ]:*+
[source, ipython3]
----
Initialize an empty string result.
Iterate over each character ch in num in reverse order:
If ch is one of the strobogrammatic digits "0", "1", "6", "8", or "9", append the corresponding strobogrammatic digit to result.
If ch is "2", "3", "4", or "5", return False because these digits do not have a strobogrammatic counterpart.
If ch is "7", return False because "7" looks different when rotated 180 degrees.
If ch is "0" or "1", append the same digit to result because they are strobogrammatic.
If the resulting string result is equal to the original string num, return True because num is a strobogrammatic number. 
Otherwise, return False.
----


+*In[2]:*+
[source, ipython3]
----
def isStrobogrammatic(num):
    strobogrammatic_map = {
        "0": "0",
        "1": "1",
        "6": "9",
        "8": "8",
        "9": "6"
    }

    result = ""
    for ch in reversed(num):
        if ch in strobogrammatic_map:
            result += strobogrammatic_map[ch]
        elif ch in ["2", "3", "4", "5", "7"]:
            return False

    return result == num
num = "69"
print(isStrobogrammatic(num))
----


+*Out[2]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 3**

Given two non-negative integers, num1 and num2 represented as string, return *the sum of* num1 *and* num2 *as a string*.

You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.

**Example 1:**

**Input:** num1 = "11", num2 = "123"

**Output:**

"134"

</aside>
----


+*In[3]:*+
[source, ipython3]
----
def addStrings(num1, num2):
    result = ""
    i, j = len(num1) - 1, len(num2) - 1
    carry = 0

    while i >= 0 or j >= 0:
        digit1 = int(num1[i]) if i >= 0 else 0
        digit2 = int(num2[j]) if j >= 0 else 0
        current_sum = digit1 + digit2 + carry
        result += str(current_sum % 10)
        carry = current_sum // 10
        i -= 1
        j -= 1

    if carry:
        result += str(carry)

    result = result[::-1]

    return result
num1 = "11"
num2 = "123"
print(addStrings(num1, num2))
----


+*Out[3]:*+
----
134
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 4**

Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

**Example 1:**

**Input:** s = "Let's take LeetCode contest"

**Output:** "s'teL ekat edoCteeL tsetnoc"

</aside>
----


+*In[ ]:*+
[source, ipython3]
----
Split the input string s into a list of words using the whitespace as the delimiter.
Iterate over each word in the list.
Reverse the characters in the word.
Join the reversed words back into a string using whitespace as the delimiter.
----


+*In[4]:*+
[source, ipython3]
----
def reverseWords(s):
    words = s.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)
s = "Let's take LeetCode contest"
print(reverseWords(s))
----


+*Out[4]:*+
----
s'teL ekat edoCteeL tsetnoc
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 5**

Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.

If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.

**Example 1:**

**Input:** s = "abcdefg", k = 2

**Output:**

"bacdfeg"

</aside>
----


+*In[ ]:*+
[source, ipython3]
----
Convert the string s into a list of characters for easier manipulation.
Iterate through the string by increments of 2k:
Reverse the characters from the current index i to i + k using two pointers: left = i and right = i + k - 1.
If the substring from i to i + k has fewer than k characters, reverse all of them.
Convert the modified list of characters back into a string and return it.
----


+*In[5]:*+
[source, ipython3]
----
def reverseStr(s, k):
    s_list = list(s)
    n = len(s)
    i = 0

    while i < n:
        left = i
        right = min(i + k - 1, n - 1)

        while left < right:
            s_list[left], s_list[right] = s_list[right], s_list[left]
            left += 1
            right -= 1

        i += 2 * k

    return "".join(s_list)
s = "abcdefg"
k = 2
print(reverseStr(s, k))
----


+*Out[5]:*+
----
bacdfeg
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 6**

Given two strings s and goal, return true *if and only if* s *can become* goal *after some number of **shifts** on* s.

A **shift** on s consists of moving the leftmost character of s to the rightmost position.

- For example, if s = "abcde", then it will be "bcdea" after one shift.

**Example 1:**

**Input:** s = "abcde", goal = "cdeab"

**Output:**

true

</aside>
----


+*In[ ]:*+
[source, ipython3]
----
To determine if a string s can become another string goal after some number of shifts, we can check if goal is a substring 
of the concatenation of s with itself. If goal is a substring of s + s, then we can obtain goal by performing some number 
of shifts on s.
----


+*In[6]:*+
[source, ipython3]
----
def rotateString(s, goal):
    if len(s) != len(goal):
        return False

    s_concat = s + s
    return goal in s_concat
s = "abcde"
goal = "cdeab"
print(rotateString(s, goal))
----


+*Out[6]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 7**

Given two strings s and t, return true *if they are equal when both are typed into empty text editors*. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

**Example 1:**

**Input:** s = "ab#c", t = "ad#c"

**Output:** true

**Explanation:**

Both s and t become "ac".

</aside>
----


+*In[7]:*+
[source, ipython3]
----
def buildString(s):
    stack = []

    for c in s:
        if c != '#':
            stack.append(c)
        elif stack:
            stack.pop()

    return ''.join(stack)

def backspaceCompare(s, t):
    return buildString(s) == buildString(t)
s = "ab#c"
t = "ad#c"
print(backspaceCompare(s, t))
----


+*Out[7]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 8**

You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.

**Example 1:**

**Input:** coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]

**Output:** true
----


+*In[ ]:*+
[source, ipython3]
----
Iterate through the array of coordinates starting from the second point.
Calculate the slope between the current point and the first point (coordinates[0]).
Iterate through the remaining points and calculate the slope between each point and the first point.
If any calculated slope is different from the initial slope, return False indicating that the points do not form a straight 
line.
If all slopes are consistent, return True indicating that the points form a straight line.
----


+*In[8]:*+
[source, ipython3]
----
def checkStraightLine(coordinates):
    x0, y0 = coordinates[0]
    x1, y1 = coordinates[1]
    for i in range(2, len(coordinates)):
        x, y = coordinates[i]
        if (x - x0) * (y1 - y0) != (y - y0) * (x1 - x0):
            return False
    return True
coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]
print(checkStraightLine(coordinates))
----


+*Out[8]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
